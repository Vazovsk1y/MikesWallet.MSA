// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MikesWallet.Accounts.WebApi.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MikesWallet.Accounts.WebApi.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Currency")
                        .IsUnique();

                    b.ToTable("Accounts", t =>
                        {
                            t.HasCheckConstraint("CK_Account_Balance", "\"Balance\" >= 0");
                        });
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)");

                    b.Property<decimal>("Commission")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Income")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Operations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Deposit", b =>
                {
                    b.HasBaseType("MikesWallet.Accounts.WebApi.DAL.Models.Operation");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasIndex("AccountId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Transfer", b =>
                {
                    b.HasBaseType("MikesWallet.Accounts.WebApi.DAL.Models.Operation");

                    b.Property<Guid>("AccountFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountToId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ExchangeRate")
                        .HasPrecision(19, 4)
                        .HasColumnType("numeric(19,4)");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Withdrawal", b =>
                {
                    b.HasBaseType("MikesWallet.Accounts.WebApi.DAL.Models.Operation");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasIndex("AccountId");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Deposit", b =>
                {
                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("MikesWallet.Accounts.WebApi.DAL.Models.Deposit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Transfer", b =>
                {
                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Account", "From")
                        .WithMany()
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Account", "To")
                        .WithMany()
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("MikesWallet.Accounts.WebApi.DAL.Models.Transfer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("MikesWallet.Accounts.WebApi.DAL.Models.Withdrawal", b =>
                {
                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikesWallet.Accounts.WebApi.DAL.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("MikesWallet.Accounts.WebApi.DAL.Models.Withdrawal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
